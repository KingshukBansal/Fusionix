name: CI/CD Pipeline for Python Flask Backend Services

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.10

      # Step 3: Identify modified services
      - name: Identify modified services
        id: detect-services
        run: |
          # Check if this is the first commit
          if git rev-parse HEAD^ >/dev/null 2>&1; then
            # Detect modified services by checking files under the services directory
            services=$(git diff --name-only HEAD^ HEAD | grep '^word-to-pdf-converter-backend/' | cut -d'/' -f2 | uniq | tr '\n' ',')
          else
            echo "No previous commit found. Assuming first commit."
            services="all" # Assume all services for the first commit
          fi

          # Format and export services
          services=${services%,} # Remove trailing comma
          echo "services=$services" >> $GITHUB_ENV
          echo "Modified services: $services"

      # Step 4: Install dependencies for modified services
      - name: Install dependencies for modified services
        run: |
          if [ "${{ env.services }}" = "all" ]; then
            echo "Installing dependencies for all services..."
            for service in word-to-pdf-converter-backend/*; do
              echo "Installing dependencies for $service"
              cd $service
              pip install -r requirements.txt
              cd -
            done
          else
            IFS=',' read -ra SERVICE_LIST <<< "${{ env.services }}"
            for service in "${SERVICE_LIST[@]}"; do
              echo "Installing dependencies for modified service: $service"
              cd word-to-pdf-converter-backend/$service
              pip install -r requirements.txt
              cd -
            done
          fi

      # Step 5: Lint the code for all services (optional but good practice)
      - name: Run Linter (flake8 or pylint)
        run: |
          if [ "${{ env.services }}" = "all" ]; then
            echo "Running linter for all services..."
            for service in word-to-pdf-converter-backend/*; do
              cd $service
              flake8 .
              cd -
            done
          else
            IFS=',' read -ra SERVICE_LIST <<< "${{ env.services }}"
            for service in "${SERVICE_LIST[@]}"; do
              cd word-to-pdf-converter-backend/$service
              flake8 .
              cd -
            done
          fi

      # Step 6: Run tests for modified services
      - name: Run tests for modified services
        run: |
          if [ "${{ env.services }}" = "all" ]; then
            echo "Running tests for all services..."
            for service in word-to-pdf-converter-backend/*; do
              echo "Running tests for $service"
              cd $service
              pytest --maxfail=5 --disable-warnings
              cd -
            done
          else
            IFS=',' read -ra SERVICE_LIST <<< "${{ env.services }}"
            for service in "${SERVICE_LIST[@]}"; do
              echo "Running tests for modified service: $service"
              cd word-to-pdf-converter-backend/$service
              pytest --maxfail=5 --disable-warnings
              cd -
            done
          fi

  cd:
    runs-on: ubuntu-latest
    needs: ci
    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Build and push Docker images for each modified service
      - name: Build Docker images for modified services
        if: github.ref == 'refs/heads/master'  # Only deploy on master branch
        run: |
          if [ "${{ env.services }}" = "all" ]; then
            echo "Building and deploying Docker images for all services..."
            for service in word-to-pdf-converter-backend/*; do
              echo "Building Docker image for $service"
              cd $service
              docker build -t your-docker-repo/$service:latest .
              docker push your-docker-repo/$service:latest
              # Assuming Kubernetes or similar deployment system, apply manifest
              kubectl apply -f manifest/$service/
              cd -
            done
          else
            IFS=',' read -ra SERVICE_LIST <<< "${{ env.services }}"
            for service in "${SERVICE_LIST[@]}"; do
              echo "Building Docker image for modified service: $service"
              cd word-to-pdf-converter-backend/$service
              docker build -t your-docker-repo/$service:latest .
              docker push your-docker-repo/$service:latest
              # Assuming Kubernetes or similar deployment system, apply manifest
              kubectl apply -f manifest/$service/
              cd -
            done
          fi

      # Step 3: Trigger deployment to Kubernetes or cloud
      - name: Deploy services to Kubernetes
        run: |
          # Apply Kubernetes manifests to update or create resources
          if [ "${{ env.services }}" = "all" ]; then
            echo "Deploying all services to Kubernetes..."
            for service in word-to-pdf-converter-backend/*; do
              kubectl apply -f manifest/$service/
            done
          else
            IFS=',' read -ra SERVICE_LIST <<< "${{ env.services }}"
            for service in "${SERVICE_LIST[@]}"; do
              kubectl apply -f manifest/$service/
            done
          fi

      # Step 4: Notify on deployment success/failure (optional)
      - name: Notify deployment status
        run: |
          if [ $? -eq 0 ]; then
            echo "Deployment successful!"
          else
            echo "Deployment failed!"
            exit 1

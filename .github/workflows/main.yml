name: Deploy Backend Microservices

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  build-and-deploy-backend:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the Repository
    - name: Checkout Repository
      uses: actions/checkout@v3
    - name: Add SSH Key for EC2 Access
      run: |
        # Write the SSH key directly to /tmp/id_rsa.pem from GitHub Secrets
        echo "${{ secrets.SSH_KEY }}" > /tmp/id_rsa.pem

        # Set the correct permissions for the SSH key
        chmod 600 /tmp/id_rsa.pem

        # Optional: verify the contents of the key (for debugging)
        cat /tmp/id_rsa.pem




    # Step 2: Log in to Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # # Step 3: Build and Push Docker Images for Backend Microservices
    # - name: Build and Push Backend Images
    #   run: |
    #     cd word-to-pdf-converter-backend
    #     for service in gateway docx-to-pdf-converter notification metadata download; do
    #       echo "Building and pushing $service..."
    #       docker build -t ${{ secrets.DOCKER_USERNAME }}/rapidfort-$service:latest $service
    #       docker push ${{ secrets.DOCKER_USERNAME }}/rapidfort-$service:latest
    #     done

    # # Step 4: Add SSH Key for EC2 Access (this should be before the deploy step)
    # - name: Add SSH Key
    #   run: |
    #     echo "${{ secrets.SSH_KEY }}" | base64 --decode > /tmp/id_rsa
    #     chmod 600 /tmp/id_rsa


    - name: Create directories and push Kubernetes manifests to EC2
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@$EC2_IP << 'EOF'
          # Create the root directory if it doesn't exist
          mkdir -p ~/word-to-pdf-converter
          
          # Change to the created directory
          cd ~/word-to-pdf-converter

          # Create subdirectories if they don't exist
          mkdir -p notification gateway rabbit metadata download docx-to-pdf-converter

          # Copy manifests to the respective subdirectories
          echo "Copying manifests for notification"
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ./word-to-pdf-converter-backend/notification/manifest/* ubuntu@$EC2_IP:~/word-to-pdf-converter/notification/

          echo "Copying manifests for gateway"
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ./word-to-pdf-converter-backend/gateway/manifest/* ubuntu@$EC2_IP:~/word-to-pdf-converter/gateway/

          echo "Copying manifests for rabbit"
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ./word-to-pdf-converter-backend/rabbit/manifest/* ubuntu@$EC2_IP:~/word-to-pdf-converter/rabbit/

          echo "Copying manifests for metadata"
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ./word-to-pdf-converter-backend/metadata/manifest/* ubuntu@$EC2_IP:~/word-to-pdf-converter/metadata/

          echo "Copying manifests for download"
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ./word-to-pdf-converter-backend/download/manifest/* ubuntu@$EC2_IP:~/word-to-pdf-converter/download/

          echo "Copying manifests for docx-to-pdf-converter"
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ./word-to-pdf-converter-backend/docx-to-pdf-converter/manifest/* ubuntu@$EC2_IP:~/word-to-pdf-converter/docx-to-pdf-converter/
        EOF

    # Step 5: Deploy Backend to Minikube on EC2
    - name: Deploy Backend Microservices
      run: |
        ssh -o StrictHostKeyChecking=no -i /tmp/id_rsa.pem ubuntu@${{ secrets.EC2_PUBLIC_IP }} << EOF
          echo "Applying Kubernetes manifests..."
          cd word-to-pdf-converter-backend
          for service in gateway docx-to-pdf-converter notification metadata download rabbit; do
            sudo kubectl apply -f $service/manifest
          done
        EOF
